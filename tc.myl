//tc1

b:=matrix input(matrix.txt);
a:=matrix input(matrix.txt);
b:= a+b;
a:= b-a;
b:= transpose(b);

//tc2

matrix 3,3 c := [[ [1.,2.,3.],[3.,4.,5.],[6.,1.,8.] ]];
d := determinant(c);
vector 3 e := [1.,2.,3.];
if not (d==0.)  then {
    a_inv := inverse(c);
    x := transpose(e);
    y:= c*x;
} else {};

//tc3

matrix 2,2 a:= [[ [1.,2.],[2.,1.] ]];
d:= determinant(a);
tr:=0.;
for i:=0 to 1 do {
    tr:= tr+ a[i,i];
}done;
D:= tr*tr - 4.*d;
e1:=0.;e2:=0.;
if D>=0. then {
    e1:= (tr+ magnitude(D))/2.;
    e2:= (tr- magnitude(D))/2.;
}else {};

//tc4

sum:=0.;
for i:=0 to 2 do {
    for j:= 0 to 2 do {
        sum:=sum+ c[i, j] * c[i, j];
    }done;
}done;
mag:= magnitude(sum);

//tc5
vector 3 vec:= [0.,0.,0.];
q:= matrix input(matrix.txt);
for i:=0 to (dimension(q)-1) do{
    print(q[i]);
    vec := vec + q[i];
}done;
print(vec);

//tc6

//threshold:= 1e-6;
//norm_diff:= 1.;
//while norm_diff > threshold do{
//    q:= q*q;
//    sum:=0.;
//    for i:=0 to (dimension(q)-1) do {  for j:= 0 to (dimension(q[0])-1) do {
//        sum:=sum+ q[i, j] * q[i, j];}done;}done;
//    mag:= magnitude(sum);
//    norm_diff:= mag - threshold;
//}done;
//print(norm_diff);
//
//tc7 Gaussian

h := 0;
k := 0;
m := dimension(q) - 1;  // Number of rows - 1
n := dimension(q[0]) - 1;  // Number of columns - 1
while h<=m and k<=n do{
    i_max := h;
    max_val:=0.;
    if q[h,k]>=0. then max_val:= q[h,k] else max_val:=-q[h,k];
    for i := h + 1 to m do {
        current:=0.;
        if q[i,k]>=0. then current:= q[i,k] else current:=-q[i,k];  
        if current > max_val then {
            i_max := i;
            max_val := current;
        } else continue;
    }done;
    if q[i_max,k] == 0. then {
        // No pivot in this column, move to next column
        k := k + 1;
    } else {
    // Swap pivot row with current row
        temp_row := q[h];
        q[h]:=q[i_max];
        q[i_max] := temp_row;
        for i := h + 1 to m do {
            f := q[i,k] / q[h,k];
            q[i,k] := 0.;
            for j := k + 1 to n do {
                q[i,j] := q[i,j] - q[h,j] * f;
            }done;
        }done;
        // Move to next pivot position
        h := h + 1;
        k := k + 1;
    };
}done;
print(q);

//tc8
vec2 :=vector input(vector.txt) ;

left := 0;
right := dimension(vec2);
mid := (left + right)/2;
key := 3.;
while left<right do {
    mid := (left + right)/2;
    if vec2[mid] == key then {
        break;
    }else {
    if vec2[mid] > key then {
            left := mid + 1;
        } else {
            right := mid - 1;
        };
    };
}done;

print(mid);

//error_tcs

//err
//v1 := vector input(matrix.txt);
//c1:=2;  c1:=true;
//vector 2 v2 := [1,2.];
//vector 2 v2 := [1.,2.]; v2[3]:=1.;
//c1:= 1/0;
//if 1==0 then c1:=1 ; 
//if 0==0 then c1:=1 else c1:=-1 ; c1:=c1+1 ;
//v2 := vector input(); v2[3.]:=1.;
//v2 := vector input(); v2[3]:=1.;
//v2 := vector input(); v2[2]:=1;
//p=4; p++ ;